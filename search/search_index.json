{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>ReqMap is a Flask-based web application for managing and visualizing requirements. It allows users to create, update, and delete requirements, as well as view a traceability diagram of the requirements.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The application follows a Model-View-Controller (MVC) architecture:</p> <ul> <li>Model: Defined in <code>models.py</code></li> <li>View: HTML Templates (<code>index.html</code>) and CSS (<code>styles.css</code>)</li> <li>Controller: Main application logic in<code>app.py</code></li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<p>Key dependencies are listed in <code>requirements.txt</code></p> <pre><code>Flask\nFlask-SQLAlchemy\nnetworkx\nmatplotlib\n</code></pre>"},{"location":"#database-model","title":"Database Model","text":"<p>The core data model is the <code>Requirement</code> class, defined in <code>models.py</code></p> <pre><code>class Requirement(db.Model):\n\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(150), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    priority = db.Column(db.String(50), nullable=False)\n    status = db.Column(db.String(50), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)\n    version = db.Column(db.Integer, default=1)\n    parent_id = db.Column(db.Integer, db.ForeignKey(\"requirement.id\"), nullable=True)\n    parent = db.relationship(\"Requirement\", remote_side=[id])\n</code></pre> <p>This model includes fields for the requirement's title, description, priority, status, creation and update timestamps, version, and a self-referential relationship for parent requirements.</p>"},{"location":"#key-functionalities","title":"Key Functionalities","text":""},{"location":"#creating-a-requirement","title":"Creating a Requirement","text":"<p>Endpoint: <code>POST/requirements</code></p> <pre><code>@app.route('/requirements', methods=['POST'])\n\ndef create_requirement():\n    data = request.get_json()\n    new_req = Requirement(\n        title=data['title'],\n        description=data['description'],\n        priority=data['priority'],\n        status=data['status']\n    )\n    db.session.add(new_req)\n    db.session.commit()\n\n    return jsonify({'message': 'Requirement created successfully!'}), 201\n</code></pre>"},{"location":"#updating-a-requirement","title":"Updating a Requirement","text":"<p>Endpoint: <code>PUT/requirements/&lt;init:id&gt;</code></p> <pre><code>@app.route('/requirements/&lt;int:id&gt;', methods=['PUT'])\n\ndef update_requirement(id):\n    data = request.get_json()\n    req = Requirement.query.get_or_404(id)\n    req.title = data['title']\n    req.description = data['description']\n    req.priority = data['priority']\n    req.status = data['status']\n    req.version += 1\n    db.session.commit()\n\n    return jsonify({'message': 'Requirement updated successfully!'})\n</code></pre>"},{"location":"#deleting-a-requirement","title":"Deleting a Requirement","text":"<p>Endpoint: <code>PUT/requirements/&lt;init:id&gt;</code></p> <pre><code>@app.route('/requirements/&lt;int:id&gt;', methods=['DELETE'])\n\ndef delete_requirement(id):\n    req = Requirement.query.get_or_404(id)\n    db.session.delete(req)\n    db.session.commit()\n\n    return jsonify({'message': 'Requirement deleted successfully!'})\n</code></pre>"},{"location":"#generating-traceability-diagram","title":"Generating Traceability Diagram","text":"<p>Endpoint: <code>GET /requirements/trace</code></p> <pre><code>@app.route('/requirements/trace', methods=['GET'])\n\ndef trace_requirements():\n    requirements = Requirement.query.all()\n    graph = nx.DiGraph()\n\n    for req in requirements:\n        graph.add_node(req.id, label=req.title)\n        if req.parent_id:\n            graph.add_edge(req.parent_id, req.id)\n\n    plt.figure(figsize=(12, 8))\n    pos = nx.spring_layout(graph)\n    nx.draw(graph, pos, with_labels=True, arrows=True, node_size=3000, node_color='lightblue')\n\n    labels = nx.get_node_attributes(graph, 'label')\n    nx.draw_networkx_labels(graph, pos, labels, font_size=8)\n\n    output = BytesIO()\n    plt.savefig(output, format='png')\n    plt.close()\n    output.seek(0)\n\n    return send_file(output, mimetype='image/png')\n</code></pre> <p>This function generates a directed graph visualization of the requirements, showing their hierarchical relationships.</p>"},{"location":"#frontend","title":"Frontend","text":"<p>The frontend is a simple HTML page (<code>index.html</code>) styled with CSS (<code>styles.css</code>). It provides a form for adding new requirements and displays existing requirements.</p>"},{"location":"#testing","title":"Testing","text":"<p>Unit tests are provided in <code>test_app.py</code>. Here's an example test case:</p> <pre><code>def test_create_requirement(self):\n    response = self.app.post('/requirements', json={\n        'title': 'Test Requirement',\n        'description': 'This is a test.',\n        'priority': 'High',\n        'status': 'Open'\n    })\n    self.assertEqual(response.status_code, 201)\n    self.assertIn('Requirement created successfully!', response.get_data(as_text=True))\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/your-username/reqmap.git\n\ncd reqmap\n</code></pre> <ol> <li>Create a virtual environment and activate it:</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n</code></pre> <ol> <li>Install the required packages:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#running-the-application","title":"Running the Application","text":"<ol> <li> <p>Start the Flask development server:    <pre><code>python app.py\n</code></pre></p> </li> <li> <p>Open a web browser and navigate to <code>http://localhost:5000</code></p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<ul> <li>Add new requirements using the form on the main page</li> <li>View existing requirements in the list below the form</li> <li>Update or delete requirements by implementing the necessary frontend functionality (not included in the current version)</li> <li>Click on \"View Traceability Diagram\" to see the relationships between requirements</li> </ul>"},{"location":"#running-the-application_1","title":"Running the Application","text":"<p>To run the application:</p> <ol> <li>Install dependencies: <code>pip install -r requirements.txt</code></li> <li>Run the Flask application: <code>python3 app.py</code></li> </ol> <p>The application will be available at <code>http://localhost:5000</code></p>"},{"location":"#future-improvements","title":"Future Improvements","text":"<ul> <li>Implement user authentication and authorization</li> <li>Add pagination for large numbers of requirements</li> <li>Implement more advanced filtering and sorting options</li> <li>Enhance the traceability diagram with more interactive features</li> </ul>"}]}